<?xml version="1.0" encoding="utf-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop" xsi:schemaLocation="
http://www.springframework.org/schema/beans 
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
http://www.springframework.org/schema/tx 
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/aop 
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
">
<!-- 	JNDI方式配置数据源 -->
<!-- 	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
<!-- 		<property name="jndiName" value="${jndiName}"></property> -->
<!-- 	</bean> -->
<!-- ========================================配置数据源========================================= -->
<!-- 	配置数据源，使用alibaba的Druid（德鲁伊）数据源 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	<!-- 应该可以自己根据名称来匹配 -->
<!-- 		<property name="driverClassName" value="${driverClassName}" /> -->
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}"/>
		<property name="password" value="${jdbc_password}"/>
		
		<property name="initialSize" value="0"/><!-- 初始化连接大小 -->
		<property name="maxActive" value="20"/><!-- 连接池最大使用连接数量 -->
		<property name="maxIdle" value="20"/><!-- 连接池最大空闲 -->
		<property name="minIdle" value="0"/><!-- 连接池最小空闲 -->
		<property name="maxWait" value="60000"/><!-- 获取连接最大等待时间 -->
		<!-- 
		<property name="poolPreparedStatements" value="true"/>
		<property name="maxPoolPreparedStatementPerConnectionSize" value="33"/>
		-->
		<property name="validationQuery" value="${validationQuery}"/>
		<property name="testOnBorrow" value="false"/>
		<property name="testOnReturn" value="false"/>
		<property name="testWhileIdle" value="true"/>
		<property name="timeBetweenEvictionRunsMillis" value="60000"/><!-- 配置多长时间才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000"/><!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="removeAbandoned" value="true"/><!-- 打开removeAbandoned功能 -->
		<property name="removeAbandonedTimeout" value="1800"/><!-- 1800秒，也就是30分钟 -->
		<property name="logAbandoned" value="true"/><!-- 关闭abanded连接时输出错误日志 -->
<!-- 		<property name="filters" value="stat"/> 监控数据库 -->
		<property name="filters" value="mergeStat"/>
	</bean>
	
<!-- ========================================针对myBatis的配置项============================== -->
	 <bean id="ysSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> <!-- 配置sqlSessionFactory -->
	 	<property name="dataSource" ref="dataSource"/> <!-- 实例化sqlSessionFactory时需要使用上述配置好的数据源和sql映射文件-->
	 	<!--
	 	自动扫描me/mapping/目录下的所有的sql映射的xml文件，省掉Configuration.xml里的手工配置
	 	value="classpath:me/mapping/*.xml"指的是classpath(类路径)下me.mapping包中的所有的xml文件
	 	UserMapper.xml位于me.mapping包下，这样UserMapper.xml就可以被自动扫描
	 	 -->
	 	<property name="mapperLocations" value="classpath:me/mapping/*.xml"></property>
	 </bean>
	 
<!-- 	 配置扫描器 -->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="me.dao" /><!-- 扫描me.dao这个包及子包下的所有映射接口类 -->
		<property name="sqlSessionFactoryBeanName" value="ysSqlSessionFactory" />
		
<!-- 		解释上下文关系 -->
<!-- 	<property name="sqlSessionFactoryBeanName" ref="sqlSessionFactory" /> 这里必须使用value形式,否则 ${jdbc_url} 不会识别 ，参考：http://songjianyong.iteye.com/blog/1663170-->
<!-- 	dbconfig.properties 的${jdbc_url} 是由  PropertyPlaceholderConfigurer类自动扫描导入的 -->

	 </bean>
	 
<!-- ========================================分隔线========================================= -->
<!--  	配置spring的事务管理器 -->
 	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/> 	
 	</bean>
<!--  	注解方式配置事务 -->
<!-- 	<tx:annotation-driven transaction-manager="transactionManager"/> -->
<!-- 	拦截器方式配置事务 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="append*" propagation="REQUIRED"/>
			<tx:method name="insert*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="modify*" propagation="REQUIRED"/>
			<tx:method name="edit*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="remove*" propagation="REQUIRED"/>
			<tx:method name="repair" propagation="REQUIRED"/>
			<tx:method name="delAndRepair" propagation="REQUIRED"/>
			
			<tx:method name="get*" propagation="SUPPORTS"/>
			<tx:method name="find*" propagation="SUPPORTS"/>
			<tx:method name="load*" propagation="SUPPORTS"/>
			<tx:method name="search*" propagation="SUPPORTS"/>
			<tx:method name="datagrid*" propagation="SUPPORTS"/>
			
			<tx:method name="*" propagation="SUPPORTS"/>
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* me.service..*Impl.*(..))"/>
		<aop:advisor advice-ref="transactionAdvice" pointcut-ref="transactionPointcut"/>
	</aop:config>
 
<!-- ========================================分隔线========================================= -->
<!--  	配置druid监控spring jdbc -->
	<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">
	</bean>
<!-- 	注意是多例 -->
	<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">
		<property name="patterns">
			<list>
				<value>me.service.*</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut"/>
	</aop:config>
 	
</beans>